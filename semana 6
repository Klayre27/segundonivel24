using System;

public class Nodo
{
    public object Valor;
    public Nodo Siguiente;

    public Nodo(object valor)
    {
        Valor = valor;
        Siguiente = null;
    }
}

public class ListaEnlazada
{
    private Nodo cabeza;

    public ListaEnlazada()
    {
        cabeza = null;
    }

    // 1. Función que calcule el número de elementos de una lista
    public int ContarElementos()
    {
        int contador = 0;
        Nodo temp = cabeza;
        while (temp != null)
        {
            contador++;
            temp = temp.Siguiente;
        }
        return contador;
    }

    // 2. Invertir una lista enlazada
    public void Invertir()
    {
        Nodo prev = null;
        Nodo current = cabeza;
        Nodo next = null;

        while (current != null)
        {
            next = current.Siguiente;
            current.Siguiente = prev;
            prev = current;
            current = next;
        }
        cabeza = prev;
    }

    // 3. Implementar el método de búsqueda
    public int Buscar(int valor)
    {
        int contador = 0;
        Nodo temp = cabeza;
        while (temp != null)
        {
            if (temp.Valor.Equals(valor))
            {
                contador++;
            }
            temp = temp.Siguiente;
        }

        if (contador > 0)
        {
            return contador;
        }
        else
        {
            Console.WriteLine("Dato no encontrado.");
            return 0;
        }
    }

    // 4. Crear lista con 50 números aleatorios y eliminar los nodos fuera de un rango
    public void EliminarFueraDeRango(int min, int max)
    {
        Nodo temp = cabeza;
        Nodo prev = null;

        while (temp != null)
        {
            if ((int)temp.Valor < min || (int)temp.Valor > max)
            {
                if (prev == null)
                {
                    cabeza = temp.Siguiente;
                }
                else
                {
                    prev.Siguiente = temp.Siguiente;
                }
            }
            prev = temp;
            temp = temp.Siguiente;
        }
    }

    // 5. Manejar listas de números primos y Armstrong
    public bool EsPrimo(int numero)
    {
        if (numero <= 1) return false;
        for (int i = 2; i <= Math.Sqrt(numero); i++)
        {
            if (numero % i == 0) return false;
        }
        return true;
    }

    public bool EsArmstrong(int numero)
    {
        int suma = 0, n = numero, r;
        int numDigits = numero.ToString().Length;
        while (n > 0)
        {
            r = n % 10;
            suma += (int)Math.Pow(r, numDigits);
            n /= 10;
        }
        return suma == numero;
    }

    // 6. Registro de estudiantes
    public class Estudiante
    {
        public string Cedula;
        public string Nombre;
        public string Apellido;
        public string Correo;
        public double NotaDefinitiva;

        public Estudiante(string cedula, string nombre, string apellido, string correo, double nota)
        {
            Cedula = cedula;
            Nombre = nombre;
            Apellido = apellido;
            Correo = correo;
            NotaDefinitiva = nota;
        }
    }

    public void AgregarEstudiante(Estudiante estudiante, bool aprobado)
    {
        Nodo nuevoNodo = new Nodo(estudiante);
        if (aprobado)
        {
            nuevoNodo.Siguiente = cabeza;
            cabeza = nuevoNodo;
        }
        else
        {
            if (cabeza == null)
            {
                cabeza = nuevoNodo;
            }
            else
            {
                Nodo temp = cabeza;
                while (temp.Siguiente != null)
                {
                    temp = temp.Siguiente;
                }
                temp.Siguiente = nuevoNodo;
            }
        }
    }

    // 7. Registro de vehículos
    public class Vehiculo
    {
        public string Placa;
        public string Marca;
        public string Modelo;
        public int Año;
        public double Precio;

        public Vehiculo(string placa, string marca, string modelo, int año, double precio)
        {
            Placa = placa;
            Marca = marca;
            Modelo = modelo;
            Año = año;
            Precio = precio;
        }
    }

    public void AgregarVehiculo(Vehiculo vehiculo)
    {
        Nodo nuevoNodo = new Nodo(vehiculo);
        if (cabeza == null)
        {
            cabeza = nuevoNodo;
        }
        else
        {
            Nodo temp = cabeza;
            while (temp.Siguiente != null)
            {
                temp = temp.Siguiente;
            }
            temp.Siguiente = nuevoNodo;
        }
    }

    // 8. Manejar lista de datos reales y calcular el promedio
    public void SepararDatosPorPromedio()
    {
        double suma = 0;
        int contador = 0;
        Nodo temp = cabeza;

        while (temp != null)
        {
            suma += Convert.ToDouble(temp.Valor);
            contador++;
            temp = temp.Siguiente;
        }

        double promedio = suma / contador;
        Console.WriteLine($"Promedio: {promedio}");

        Nodo menores = null, mayores = null;

        temp = cabeza;
        while (temp != null)
        {
            if (Convert.ToDouble(temp.Valor) <= promedio)
            {
                // Agregar a la lista de menores
            }
            else
            {
                // Agregar a la lista de mayores
            }
            temp = temp.Siguiente;
        }
    }

    // 9. Comparar dos listas de enteros
    public bool CompararListas(ListaEnlazada lista2)
    {
        Nodo temp1 = cabeza;
        Nodo temp2 = lista2.cabeza;
        while (temp1 != null && temp2 != null)
        {
            if (!temp1.Valor.Equals(temp2.Valor))
                return false;
            temp1 = temp1.Siguiente;
            temp2 = temp2.Siguiente;
        }
        return temp1 == null && temp2 == null;
    }

    // Imprimir lista
    public void ImprimirLista()
    {
        Nodo temp = cabeza;
        while (temp != null)
        {
            Console.Write(temp.Valor + " ");
            temp = temp.Siguiente;
        }
        Console.WriteLine();
    }
}

class Program
{
    static void Main()
    {
        ListaEnlazada lista = new ListaEnlazada();

        // Ejemplo de uso para los ejercicios

        // Agregar estudiantes
        Estudiante estudiante1 = new Estudiante("1750037861", "Jennyfer", "Klayre", "jennyfer@correo.com", 8.5);
        lista.AgregarEstudiante(estudiante1, true); // Estudiante aprobado

        // Agregar vehículos
        Vehiculo vehiculo1 = new Vehiculo("ABC123", "Toyota", "Corolla", 2020, 20000);
        lista.AgregarVehiculo(vehiculo1);

        // Contar elementos
        Console.WriteLine("Cantidad de elementos: " + lista.ContarElementos());

        // Buscar un dato
        Console.WriteLine("Número de veces que se encuentra el valor 8: " + lista.Buscar(8));

        // Invertir lista
        lista.Invertir();
        lista.ImprimirLista();
    }
}
